h1. FileSystem River for Elasticsearch

Welcome to the FS River Plugin for "Elasticsearch":http://www.elasticsearch.org/ 


h2. Versions

|_. FS River Plugin |_. ElasticSearch|_. Attachment Plugin|
|  master (0.0.1)   |    0.19.4      |       1.4.0        |


h2. Build Status

Thanks to cloudbees for the "build status":https://buildhive.cloudbees.com : !https://buildhive.cloudbees.com/job/dadoonet/job/fsriver/badge/icon(Build Status)!:https://buildhive.cloudbees.com/job/dadoonet/job/fsriver/


h2. Getting Started

h3. Installation

Just type :

<pre>
$ bin\plugin -install dadoonet/fsriver/0.0.1-SNAPSHOT
</pre>

This will do the job...

<pre>
-> Installing dadoonet/fsriver/0.0.1...
Trying https://github.com/downloads/dadoonet/fsriver/fsriver-0.0.1-SNAPSHOT.zip...
Downloading ...DONE
Installed fsriver
</pre>

h3. Creating a FS river

We create first an index to store our @documents@ :

<pre>
$ curl -XPUT 'localhost:9200/mydocs/' -d '{}'
</pre>

We create the river with the following properties :

* FS URL : /tmp
* Update Rate : every 15 minutes (15 * 60 * 1000 = 900000 ms)
* Get only docs like *.doc and *.pdf
* Don't index resume*


<pre>
$ curl -XPUT 'localhost:9200/_river/mydocs/_meta' -d '{
  "type": "fs",
  "fs": {
	"name": "My tmp dir",
	"url": "/tmp",
	"update_rate": 900000,
	"includes": "*.doc,*.pdf",
	"excludes": "resume"
  }
}'
</pre>

h3. Adding another FS river

We add another river with the following properties :

* FS URL : /tmp2
* Update Rate : every hour (60 * 60 * 1000 = 3600000 ms)
* Get only docs like *.doc, *.xls and *.pdf

By the way, we define to index in the same index/type as the previous one:

* index: docs
* type: doc 

<pre>
$ curl -XPUT 'localhost:9200/_river/mynewriver/_meta' -d '{
  "type": "fs",
  "fs": {
	"name": "My tmp2 dir",
	"url": "/tmp2",
	"update_rate": 3600000,
	"includes": [ "*.doc" , "*.pdf" ]
  },
  "index": {
  	"index": "mydocs",
  	"type": "doc",
  	bulk_size: 50
  }
}'
</pre>

h3. Searching for docs

This is a common use case in elasticsearch, we want to search for something ;-)

<pre>
$ curl -XGET http://localhost:9200/docs/doc/_search -d '{
  "query" : {
    "text" : {
        "_all" : "I am searching for something !"
    }
  }
}'
</pre>


h2. Advanced

h3. Autogenerated mapping

When the FSRiver detect a new type, it creates automatically a mapping for this type.

<pre>
{
  "doc" : {
    "properties" : {
      "file" : {
        "type" : "attachment",
        "path" : "full",
        "fields" : {
          "file" : {
            "type" : "string",
            "store" : "yes",
            "term_vector" : "with_positions_offsets"
          },
          "author" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string",
            "store" : "yes"
          },
          "name" : {
            "type" : "string"
          },
          "date" : {
            "type" : "date",
            "format" : "dateOptionalTime"
          },
          "keywords" : {
            "type" : "string"
          },
          "content_type" : {
            "type" : "string"
          }
        }
      },
      "name" : {
        "type" : "string",
        "analyzer" : "keyword"
      },
      "pathEncoded" : {
        "type" : "string",
        "analyzer" : "keyword"
      },
      "postDate" : {
        "type" : "date",
        "format" : "dateOptionalTime"
      },
      "rootpath" : {
        "type" : "string",
        "analyzer" : "keyword"
      },
      "virtualpath" : {
        "type" : "string",
        "analyzer" : "keyword"
      }
    }
  }
}
</pre>

h3. Creating your own mapping (analyzers)

If you want to define your own mapping to set analyzers for example, you can pus the mapping before
starting the FS River.

<pre>
{
  "doc" : {
    "properties" : {
      "file" : {
        "type" : "attachment",
        "path" : "full",
        "fields" : {
          "file" : {
            "type" : "string",
            "store" : "yes",
            "term_vector" : "with_positions_offsets",
            "analyzer" : "french"
          },
          "author" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string",
            "store" : "yes"
          },
          "name" : {
            "type" : "string"
          },
          "date" : {
            "type" : "date",
            "format" : "dateOptionalTime"
          },
          "keywords" : {
            "type" : "string"
          },
          "content_type" : {
            "type" : "string"
          }
        }
      },
      "name" : {
        "type" : "string",
        "analyzer" : "keyword"
      },
      "pathEncoded" : {
        "type" : "string",
        "analyzer" : "keyword"
      },
      "postDate" : {
        "type" : "date",
        "format" : "dateOptionalTime"
      },
      "rootpath" : {
        "type" : "string",
        "analyzer" : "keyword"
      },
      "virtualpath" : {
        "type" : "string",
        "analyzer" : "keyword"
      }
    }
  }
}
</pre>

h3. Meta fields

FS River creates some meta fields :

|_.    Field      |_.       Description                                               |_.      Example                 |
| name            | Original file name                                                | mydocument.pdf                 |
| pathEncoded     | BASE64 encoded file path (for internal use)                       |112aed83738239dbfe4485f024cd4ce1|
| postDate        | Indexing date                                                     |1312893360000                   |
| rootpath        | BASE64 encoded root path (for internal use)                       |112aed83738239dbfe4485f024cd4ce1|
| virtualpath     | Relative path                                                     | mydir/otherdir                 |


h3. Advanced search

You can use meta fields to perform search on.

<pre>
$ curl -XGET http://localhost:9200/docs/doc/_search -d '{
  "query" : {
    "term" : {
        "name" : "mydocument.pdf"
    }
  }
}'
</pre>

h2. Behind the scene

h3. How it works ?

TO BE COMPLETED


